version: "3.3"

########################### NETWORKS
networks:
  t2_proxy:
    external:
      name: t2_proxy
  default:
    driver: bridge

########################### SERVICES
services:
# All services / apps go below this line

# Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik-27
    image: traefik:2.2.7 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`traefik.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
    #   - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.httpchallenge=true
      - --certificatesResolvers.dns-cloudflare.acme.httpchallenge.entrypoint=http
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/proxy/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/proxy/acme/acme.json:/acme.json 
      - $DOCKERDIR/proxy/logs/traefik.log:/traefik.log 
      - $DOCKERDIR/proxy/shared:/shared
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"

  ############################# DATABASE

  # MariaDB - MySQL Database
  # mariadb:
  #   container_name: mariadb
  #   image: linuxserver/mariadb:latest
  #   restart: always
  #   networks:
  #       # - default
  #       t2_proxy:
  #           ipv4_address: 192.168.90.250
  #   security_opt:
  #       - no-new-privileges:true
  #   ports:
  #       - "$MYSQL_PORT:3306"
  #   volumes:
  #       - $DOCKERDIR/proxy/data/mariadb/data:/config
  #       - /etc/timezone:/etc/timezone:ro
  #       - /etc/localtime:/etc/localtime:ro
  #   environment:
  #       PUID: ${PUID}
  #       PGID: ${PGID}
  #       MYSQL_USER: ${MYSQL_USER}
  #       MYSQL_PASS: ${MYSQL_PASSWORD}
  #       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #       MYSQL_DATABASE: ${MYSQL_DATABASE}

  # # phpMyAdmin - Database management
  # # Create a new user with admin privileges. Cannot login as MySQL root for some reason.
  # phpmyadmin:
  #   image: phpmyadmin/phpmyadmin:latest
  #   container_name: phpmyadmin
  #   restart: unless-stopped
  #   networks:
  #     t2_proxy:
  #       ipv4_address: 192.168.90.252
  #   security_opt:
  #     - no-new-privileges:true
  #   # ports:
  #   #   - "$PHPMYADMIN_PORT:80"
  #   # volumes:
  #   #   - $DOCKERDIR/phpmyadmin:/etc/phpmyadmin
  #   environment:
  #     - PMA_HOST=$DB_HOST
  #     - PMA_PORT=$DB_PORT
  #     - PMA_ARBITRARY=1
  #     - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
  #     - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME`)"
  #     - "traefik.http.routers.phpmyadmin-rtr.tls=true"      
  #     ## Middlewares
  #     # - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-authelia@file"
  #     - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
  #     - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"

  # ## Redis - Key-value Store
  # redis:
  #   container_name: redis
  #   image: redis:latest
  #   restart: unless-stopped
  #   entrypoint: redis-server --appendonly yes
  #   networks:
  #     - t2_proxy
  #   ports:
  #     - "6379:6379"
  #   security_opt:
  #     - no-new-privileges:true
  #   volumes:
  #     - $DOCKERDIR/proxy/data/redis/data:/data
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro

  # ## Redis Commander - Redis Management Tool
  # rediscommander:
  #   container_name: rediscommander
  #   image: rediscommander/redis-commander:latest
  #   restart: unless-stopped
  #   networks:
  #     t2_proxy:
  #       ipv4_address: 192.168.90.251
  #   # ports:
  #   #   - "$REDISCOMMANDER_PORT:8081"
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - REDIS_HOST=redis
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.rediscommander-rtr.entrypoints=https"
  #     - "traefik.http.routers.rediscommander-rtr.rule=Host(`rediscom.$DOMAINNAME`)"
  #     - "traefik.http.routers.rediscommander-rtr.tls=true"
  #     ## Middlewares
  #     # - "traefik.http.routers.rediscommander-rtr.middlewares=chain-authelia@file"
  #     - "traefik.http.routers.rediscommander-rtr.middlewares=chain-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.rediscommander-rtr.service=rediscommander-svc"
  #     - "traefik.http.services.rediscommander-svc.loadbalancer.server.port=8081"
  # ## VSCode - VSCode Editing
  # vscode:
  #   image: codercom/code-server:latest
  #   container_name: vscode
  #   restart: unless-stopped
  #   networks:
  #     t2_proxy:
  #       ipv4_address: 192.168.90.249
  #   # ports:
  #   #   - "$VSCODE_PORT:8080"
  #   volumes:
  #     - $DOCKERDIR/proxy:/home/coder/docker
  #     # - $USERDIR/Downloads:/home/coder/Downloads
  #     - $DOCKERDIR/proxy/services/vscode:/home/coder
  #     - $DOCKERDIR/services:/home/coder/services
  #   environment:
  #     PASSWORD: $VSCODE_PASSWORD
  #   # Run as root first, create the directories, then change permissions to user:docker and 775. Disable run as root below.
  #   user: $PUID:$PGID
  #   # user: "0"
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.vscode-rtr.entrypoints=https"
  #     - "traefik.http.routers.vscode-rtr.rule=Host(`code.$DOMAINNAME`)"
  #     - "traefik.http.routers.vscode-rtr.tls=true"
  #     ## Middlewares
  #     - "traefik.http.routers.vscode-rtr.middlewares=chain-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.vscode-rtr.service=vscode-svc"
  #     - "traefik.http.services.vscode-svc.loadbalancer.server.port=8080"