version: "3.3"

########################### NETWORKS
networks:
  internal: 
    external: false
  t2_proxy:
    external:
      name: t2_proxy
  default:
    driver: bridge

########################### SERVICES
services:
# All services / apps go below this line

# Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik-27
    image: traefik:2.2.7 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    restart: unless-stopped
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`traefik.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
    #   - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.tlschallenge=true
      - --certificatesResolvers.dns-cloudflare.acme.httpchallenge=true
      - --certificatesResolvers.dns-cloudflare.acme.httpchallenge.entrypoint=http
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
    networks:
      internal:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/acme/acme.json:/acme.json 
      - $DOCKERDIR/logs/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"

  ############################# WEBMIN-PROXY
  # webmin-proxy:
  #   container_name: webmin-proxy
  #   image: qoomon/docker-host
  #   restart: always
  #   cap_add: ["NET_ADMIN", "NET_RAW"]
  #   labels:
  #     - traefik.enable=true
  #     ## HTTP Routers
  #     ### HTTP - WEB
  #     # - traefik.http.middlewares.webmin-redirect-websecure.redirectscheme.scheme=https
  #     # - traefik.http.routers.webmin-web.rule=Host(`webhost.$DOMAINNAME`)
  #     # - traefik.http.routers.webmin-web.entrypoints=http
  #     ### HTTPS - WEBSECURE
  #     # - traefik.http.routers.webmin-web.middlewares=webmin-redirect-websecure
  #     - traefik.http.routers.webmin-websecure.entrypoints=https
  #     - traefik.http.routers.webmin-websecure.rule=Host(`webhost.$DOMAINNAME`)
  #     - traefik.tags= t2_proxy
  #     - traefik.docker.network=t2_proxy
  #     - traefik.http.routers.webmin-websecure.tls=true
  #     - traefik.http.routers.webmin-websecure.tls.certresolver=dns-cloudflare
  #     ## Middlewares
  #     - traefik.http.routers.sipee-jl-rtr.middlewares=chain-no-auth@file
  #     ## HTTP Services
  #     - traefik.http.routers..webmin-websecure.service=.webmin-global
  #     - traefik.http.services.webmin-global.loadbalancer.server.port=10000
  #   networks:
  #     - internal
  #     - t2_proxy


  ############################# WEBMIN-BIND9
  bind:
    container_name: webmin-bind
    restart: always
    image: sameersbn/bind:9.16.1-20200524
    ports:
      - "54:53/udp"
      - "54:53/tcp"
      - "10001:10000/tcp"
    dns:
      - 153.92.2.25
      - 9.9.9.9
      - 8.8.4.4
      - 192.168.90.2
    volumes:
      - $DOCKERDIR/data/bind:/data
    networks:
      t2_proxy: 
        ipv4_address: 192.168.90.2
    environment:
      - WEBMIN_INIT_SSL_ENABLED:0
      - WEBMIN_INIT_REDIRECT_PORT:443
      - WEBMIN_INIT_REFERERS:webhost.$DOMAINNAME
      - ROOT_PASSWORD=268423
    labels:
      - "traefik.enable=true"
      - traefik.tags= t2_proxy
      - traefik.docker.network=t2_proxy
      ## HTTP Routers
      - traefik.http.routers.webmin.entrypoints=https
      - traefik.http.routers.webmin.rule=Host(`webhost.$DOMAINNAME`)
      - traefik.http.routers.webmin.tls=true
      - traefik.http.routers.webmin.tls.certresolver=dns-cloudflare
      ## Middlewares
      - "traefik.http.routers.webmin.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.webmin.service=webmin-svc"
      - "traefik.http.services.webmin-svc.loadbalancer.server.port=10001"



  # ## Redis - Key-value Store
  # redis:
  #   container_name: redis
  #   image: redis:latest
  #   restart: unless-stopped
  #   entrypoint: redis-server --appendonly yes
  #   networks:
  #     - t2_proxy
  #   ports:
  #     - "6379:6379"
  #   security_opt:
  #     - no-new-privileges:true
  #   volumes:
  #     - $DOCKERDIR/proxy/data/redis/data:/data
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro

  # ## Redis Commander - Redis Management Tool
  # rediscommander:
  #   container_name: rediscommander
  #   image: rediscommander/redis-commander:latest
  #   restart: unless-stopped
  #   networks:
  #     t2_proxy:
  #       ipv4_address: 192.168.90.251
  #   # ports:
  #   #   - "$REDISCOMMANDER_PORT:8081"
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - REDIS_HOST=redis
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.rediscommander-rtr.entrypoints=https"
  #     - "traefik.http.routers.rediscommander-rtr.rule=Host(`rediscom.$DOMAINNAME`)"
  #     - "traefik.http.routers.rediscommander-rtr.tls=true"
  #     ## Middlewares
  #     # - "traefik.http.routers.rediscommander-rtr.middlewares=chain-authelia@file"
  #     - "traefik.http.routers.rediscommander-rtr.middlewares=chain-basic-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.rediscommander-rtr.service=rediscommander-svc"
  #     - "traefik.http.services.rediscommander-svc.loadbalancer.server.port=8081"
